<?xml version="1.0"?>

<!--

Config file for PHP_CodeSniffer used by the "inspect:sniff" artisan command povided with the brodkinca/BCA-Laravel-Inspect package.

According to https://github.com/laravel/framework/blob/master/CONTRIBUTING.md#coding-guidelines Laravel follows PSR-1 coding standards with the following additions:

 - Namespace declarations should be on the same line as <?php.
 - Class opening { should be on the same line as the class name.
 - Function and control structure opening { should be on a separate line.
 - Interface and Trait names are suffixed with Interface (FooInterface) and Trait (FooTrait) respectively.

For a list examples of which code snippet would trigger a sniffs: https://forge.typo3.org/projects/team-php_codesniffer/wiki/TYPO3v4_Sniffs_with_code_examples

For manually running phpcs without artisan:

	./vendor/bin/phpcs app/ \-\-standard=app/phpcs.xml \-\-report-full \-\-report=source \-\-report-width=100 \-\-tab-width=4 -s

For manually running php-cs-fixer without artisan:

	php-cs-fixer fix app/ \-\-fixers=-indentation,-braces,-psr0

-->

<ruleset name="Stolz">

	<description>Stolz's custom phpcs rules for Laravel</description>

	<exclude-pattern>/libraries/TVarDumper.php</exclude-pattern>
	<exclude-pattern>/storage/</exclude-pattern>

	<!-- ========== Internal ======================================== -->

	<rule ref="Internal.NoCodeFound">
		<!-- Suppress warning for view files without PHP code -->
		<exclude-pattern>/views/</exclude-pattern>
	</rule>

	<!-- ========== Generic ======================================== -->

	<!--
	<rule ref="Generic.Commenting.Todo"/>
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>
	<rule ref="Generic.Debug.ClosureLinter"/>
	<rule ref="Generic.Debug.ClosureLinter.ExternalToolError"/>
	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.Files.LineEndings"/>
	<rule ref="Generic.Files.LineLength"/>
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.Formatting.MultipleStatementAlignment"/>
	<rule ref="Generic.Formatting.SpaceAfterCast"/>
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
	-->

	<rule ref="Generic.NamingConventions.CamelCapsFunctionName.NotCamelCaps">
		<!-- Laravel's helpers function names are not in camel case -->
		<exclude-pattern>helpers.php</exclude-pattern>
	</rule>

	<!--
	<rule ref="Generic.NamingConventions.ConstructorName"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound"/>
	-->

	<!-- Force lowercase constant (false / true / null) -->
	<rule ref="Generic.PHP.LowerCaseConstant"/>

	<!--
	<rule ref="Generic.PHP.LowerCaseKeyword"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat"/>
	-->

	<!-- Force tabs identation -->
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

	<!--
	<rule ref="Generic.WhiteSpace.ScopeIndent"/>
	-->

	<!-- ========== MySource ======================================== -->

	<!--
	<rule ref="MySource.Channels.ChannelException"/>
	<rule ref="MySource.Channels.DisallowSelfActions"/>
	<rule ref="MySource.Channels.IncludeOwnSystem"/>
	<rule ref="MySource.Channels.IncludeSystem"/>
	<rule ref="MySource.Channels.UnusedSystem"/>
	<rule ref="MySource.Commenting.FunctionComment"/>
	<rule ref="MySource.CSS.BrowserSpecificStyles"/>
	<rule ref="MySource.Debug.DebugCode"/>
	<rule ref="MySource.Debug.FirebugConsole"/>
	<rule ref="MySource.Objects.AssignThis"/>
	<rule ref="MySource.Objects.CreateWidgetTypeCallback"/>
	<rule ref="MySource.Objects.DisallowNewWidget"/>
	<rule ref="MySource.PHP.AjaxNullComparison"/>
	<rule ref="MySource.PHP.EvalObjectFactory"/>
	<rule ref="MySource.PHP.GetRequestData"/>
	<rule ref="MySource.PHP.ReturnFunctionValue"/>
	<rule ref="MySource.Strings.JoinStrings"/>-->

	<!-- ========== PEAR ======================================== -->

	<!--
	<rule ref="PEAR.Classes.ClassDeclaration"/>
	<rule ref="PEAR.Commenting.ClassComment"/>
	<rule ref="PEAR.Commenting.FileComment"/>
	<rule ref="PEAR.Commenting.FunctionComment"/>
	<rule ref="PEAR.Commenting.InlineComment"/>
	<rule ref="PEAR.ControlStructures.ControlSignature"/>
	<rule ref="PEAR.ControlStructures.MultiLineCondition"/>
	<rule ref="PEAR.Files.IncludingFile"/>
	<rule ref="PEAR.Formatting.MultiLineAssignment"/>
	<rule ref="PEAR.Functions.FunctionCallSignature"/>
	<rule ref="PEAR.Functions.FunctionDeclaration"/>
	<rule ref="PEAR.Functions.ValidDefaultValue"/>
	<rule ref="PEAR.NamingConventions.ValidClassName"/>
	<rule ref="PEAR.NamingConventions.ValidFunctionName"/>
	<rule ref="PEAR.NamingConventions.ValidVariableName"/>
	<rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/>
	<rule ref="PEAR.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="PEAR.WhiteSpace.ScopeIndent"/>
	-->

	<!-- ========== PSR1 ======================================== -->

	<rule ref="PSR1">
		<!-- Allow classes without a namespace -->
		<exclude name="PSR1.Classes.ClassDeclaration.MissingNamespace"/>

	</rule>
	<rule ref="PSR1.Classes.ClassDeclaration.MultipleClasses">
		<!-- Allow declaring multiple exeptions classes in the same file -->
		<exclude-pattern>libraries/exceptions.php</exclude-pattern>
	</rule>

	<!-- ========== PSR2 ======================================== -->

	<rule ref="PSR2">

		<!-- Allow long lines identation -->
		<exclude name="Generic.Files.LineLength.TooLong"/>

		<!-- Allow tabs identation -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent.TabsUsed"/>

		<!-- Disable class opening brace on new line -->
		<exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine"/>

		<!-- Do not force control structures opening brace to be in the same line -->
		<exclude name="Squiz.ControlStructures.ControlSignature"/>
	</rule>

	<!-- ========== Squiz ======================================== -->

	<!-- Do not use spaces before or after array brakets -->
	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

	<!--
	<rule ref="Squiz.Arrays.ArrayDeclaration"/>
	<rule ref="Squiz.Classes.ClassDeclaration"/>
	<rule ref="Squiz.Classes.ClassFileName"/>
	<rule ref="Squiz.Classes.DuplicateProperty"/>
	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>
	<rule ref="Squiz.Classes.SelfMemberReference"/>
	<rule ref="Squiz.Classes.ValidClassName"/>
	<rule ref="Squiz.CodeAnalysis.EmptyStatement"/>
	<rule ref="Squiz.Commenting.BlockComment"/>
	<rule ref="Squiz.Commenting.ClassComment"/>
	<rule ref="Squiz.Commenting.ClosingDeclarationComment"/>
	<rule ref="Squiz.Commenting.DocCommentAlignment"/>
	<rule ref="Squiz.Commenting.EmptyCatchComment"/>
	<rule ref="Squiz.Commenting.FileComment"/>
	<rule ref="Squiz.Commenting.FunctionComment"/>
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
	<rule ref="Squiz.Commenting.InlineComment"/>
	<rule ref="Squiz.Commenting.LongConditionClosingComment"/>
	<rule ref="Squiz.Commenting.PostStatementComment"/>
	<rule ref="Squiz.Commenting.VariableComment"/>
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Squiz.ControlStructures.ElseIfDeclaration"/>
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.InlineIfDeclaration"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
	<rule ref="Squiz.ControlStructures.SwitchDeclaration"/>
	<rule ref="Squiz.CSS.ClassDefinitionClosingBraceSpace"/>
	<rule ref="Squiz.CSS.ClassDefinitionNameSpacing"/>
	<rule ref="Squiz.CSS.ClassDefinitionOpeningBraceSpace"/>
	<rule ref="Squiz.CSS.ColonSpacing"/>
	<rule ref="Squiz.CSS.ColourDefinition"/>
	<rule ref="Squiz.CSS.DisallowMultipleStyleDefinitions"/>
	<rule ref="Squiz.CSS.DuplicateClassDefinition"/>
	<rule ref="Squiz.CSS.DuplicateStyleDefinition"/>
	<rule ref="Squiz.CSS.EmptyClassDefinition"/>
	<rule ref="Squiz.CSS.EmptyStyleDefinition"/>
	<rule ref="Squiz.CSS.ForbiddenStyles"/>
	<rule ref="Squiz.CSS.Indentation"/>
	<rule ref="Squiz.CSS.LowercaseStyleDefinition"/>
	<rule ref="Squiz.CSS.MissingColon"/>
	<rule ref="Squiz.CSS.NamedColours"/>
	<rule ref="Squiz.CSS.Opacity"/>
	<rule ref="Squiz.CSS.SemicolonSpacing"/>
	<rule ref="Squiz.CSS.ShorthandSize"/>
	<rule ref="Squiz.Debug.JavaScriptLint"/>
	<rule ref="Squiz.Debug.JSLint"/>
	<rule ref="Squiz.Files.FileExtension"/>
	<rule ref="Squiz.Formatting.OperatorBracket"/>
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing"/>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint"/>
	<rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
	<rule ref="Squiz.Functions.GlobalFunction"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>
	<rule ref="Squiz.NamingConventions.ConstantCase"/>
	<rule ref="Squiz.NamingConventions.ValidFunctionName"/>
	<rule ref="Squiz.NamingConventions.ValidVariableName"/>
	<rule ref="Squiz.Objects.DisallowObjectStringIndex"/>
	<rule ref="Squiz.Objects.ObjectInstantiation"/>
	<rule ref="Squiz.Objects.ObjectMemberComma"/>
	<rule ref="Squiz.Operators.ComparisonOperatorUsage"/>
	<rule ref="Squiz.Operators.IncrementDecrementUsage"/>
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.PHP.CommentedOutCode"/>
	<rule ref="Squiz.PHP.DisallowBooleanStatement"/>
	<rule ref="Squiz.PHP.DisallowComparisonAssignment"/>
	<rule ref="Squiz.PHP.DisallowInlineIf"/>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Squiz.PHP.DisallowObEndFlush"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Squiz.PHP.DiscouragedFunctions"/>
	<rule ref="Squiz.PHP.EmbeddedPhp"/>
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.ForbiddenFunctions"/>
	<rule ref="Squiz.PHP.GlobalKeyword"/>
	<rule ref="Squiz.PHP.Heredoc"/>
	<rule ref="Squiz.PHP.InnerFunctions"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Squiz.Scope.MemberVarScope"/>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.Scope.StaticThisUsage"/>
	<rule ref="Squiz.Strings.ConcatenationSpacing"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
	<rule ref="Squiz.Strings.EchoedStrings"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
	<rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace"/>
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
	<rule ref="Squiz.WhiteSpace.FunctionSpacing"/>
	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
	<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/>
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile"/>
	-->

	<!-- ========== Zend ======================================== -->

	<!--
	<rule ref="Zend.Debug.CodeAnalyzer"/>
	<rule ref="Zend.Files.ClosingTag"/>
	<rule ref="Zend.NamingConventions.ValidVariableName"/>
	-->

</ruleset>

